/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY 0
#define NUM 1
#define NAV 2
#define FUN 3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };

    macros {
        enye: enye {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings =
                <&macro_press>,
                <&kp TILDE>,
                <&macro_tap>,
                <&kp N>,
                <&macro_release>,
                <&kp TILDE>;
        };

        switch_app: switch_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>;
        };

        switch_window: switch_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp LGUI>;
        };
    };

    behaviors {
        tilde_n: tilde_n {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&enye>, <&kp SEMI>;
        };

        switcher: switcher {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&switch_app>, <&switch_window>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp Q             &kp W        &kp E           &kp R           &kp T          &kp Y      &kp U            &kp I            &kp O                &kp P
&mt LEFT_SHIFT A  &mt LCTRL S  &mt LEFT_ALT D  &mt LEFT_GUI F  &kp G          &kp H      &mt RIGHT_GUI J  &mt RIGHT_ALT K  &mt RIGHT_CONTROL L  &mt RIGHT_SHIFT &tilde_n
&kp Z             &kp X        &kp C           &kp V           &kp B          &kp N      &kp M            &kp COMMA        &kp DOT              &kp FSLH
                               &kp LGUI        &mo NAV         &smart_shft    &kp SPACE  &mo NUM          &super_bspc
            >;
        };

        num_layer {
            bindings = <
&kp TILDE    &kp AT    &kp LBRC  &kp RBRC  &kp PRCNT    &kp STAR    &kp N7  &kp N8  &kp N9  &kp MINUS
&kp CARET    &kp HASH  &kp LPAR  &kp RPAR  &kp DLLR     &kp UNDER   &kp N4  &kp N5  &kp N6  &kp PLUS
&amps_morph  &kp LT    &kp LBKT  &kp RBKT  &kp GT       &slh_morph  &kp N1  &kp N2  &kp N3  &kp EQUAL
                       &trans    &trans    &kp N0       &trans      &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
&switcher  &trans     &trans    &trans    &trans     &trans    &kp HOME  &kp END  &kp TAB    &super_bspc
&sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &kp TAB    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &gresc
&trans     &kp DEL    &trans    &trans    &trans     &trans    &kp RET   &trans   &trans     &trans
                      &trans    &trans    &trans     &trans    &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
&trans        &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG    &trans  &kp F7  &kp F8  &kp F9  &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_CLR    &kp C_PREV    &kp C_PP      &kp C_NEXT    &trans          &trans  &kp F1  &kp F2  &kp F3  &kp F10
                            &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
